(function(e){function n(d){if(t[d])return t[d].exports;var o=t[d]={i:d,l:!1,exports:{}};return e[d].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,d){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:d})},n.n=function(e){var t=e&&e.__esModule?function(){return e['default']}:function(){return e};return n.d(t,'a',t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p='',n(n.s=1)})([function(e,n,t){e.exports=t(2).default,e.exports.default=e.exports},function(e,n,t){'use strict';Object.defineProperty(n,'__esModule',{value:!0});var d=t(0),o=t.n(d),i=t(3),l=o.a.createVNode;o.a.render(l(16,i.a,null,null,{width:100,height:100,style:{width:'800px',height:'800px'}}),document.getElementsByTagName('main')[0])},function(e,n){'use strict';function t(e){return!u(e.prototype)&&!u(e.prototype.render)}function d(e){var n=typeof e;return'string'==n||'number'==n}function o(e){return u(e)||p(e)}function l(e){return p(e)||!1===e||s(e)||u(e)}function i(e){return'function'==typeof e}function a(e){return'string'==typeof e}function r(e){return'number'==typeof e}function p(e){return null===e}function s(e){return!0===e}function u(e){return void 0===e}function c(e){return'object'==typeof e}function f(e){throw e||(e=mn),new Error('Inferno Error: '+e)}function m(e,n){var t={};if(e)for(var d in e)t[d]=e[d];if(n)for(var o in n)t[o]=n[o];return t}function h(){this.listeners=[]}function g(e,n,t,d){var o=Mn.get(e);if(t)o||(o={items:new Map,docEvent:null},o.docEvent=b(e,o),Mn.set(e,o)),!n&&On&&'onClick'===e&&x(d),o.items.set(d,t);else if(o){var i=o.items;i.delete(d)&&0===i.size&&(document.removeEventListener(_(e),o.docEvent),Mn.delete(e))}}function y(e,n,t,d,o,i){for(var l,a=n;0<d;){if(l=t.get(a),l&&(d--,i.dom=a,l.event?l.event(l.data,e):l(e),e.cancelBubble))return;if(a=a.parentNode,null===a||o&&a.disabled)return}}function _(e){return e.substr(2).toLowerCase()}function k(){this.cancelBubble=!0,this.stopImmediatePropagation()}function b(e,n){var t=function(e){var t=n.items.size;if(0<t){e.stopPropagation=k;var d={dom:document};try{Object.defineProperty(e,'currentTarget',{configurable:!0,get:function(){return d.dom}})}catch(n){}y(e,e.target,n.items,t,'click'===e.type,d)}};return document.addEventListener(_(e),t),t}function v(){}function x(e){e.onclick=v}function N(e){return'checkbox'===e||'radio'===e}function C(n){var e=this.vNode,t=e.props||Dn,d=e.dom,o=t.value;if(t.onInput){var i=t.onInput;i.event?i.event(i.data,n):i(n)}else t.oninput&&t.oninput(n);var l=this.vNode,a=l.props||Dn;o!==a.value&&M(a,d)}function S(n){var e=this.vNode.props||Dn,t=e.onChange;t.event?t.event(t.data,n):t(n)}function w(n){n.stopPropagation();var e=this.vNode,t=e.props||Dn,d=e.dom;if(t.onClick){var o=t.onClick;o.event?o.event(o.data,n):o(n)}else t.onclick&&t.onclick(n);var i=this.vNode,l=i.props||Dn;M(l,d)}function O(e,n,t,d,o){M(t,n),o&&(n.vNode=e,d&&(N(t.type)?(n.onclick=w,n.onclick.wrapped=!0):(n.oninput=C,n.oninput.wrapped=!0),t.onChange&&(n.onchange=S,n.onchange.wrapped=!0)))}function M(e,n){var t=e.type,d=e.value,i=e.checked,l=e.multiple,a=e.defaultValue,r=!o(d);t&&t!==n.type&&n.setAttribute('type',t),l&&l!==n.multiple&&(n.multiple=l),o(a)||r||(n.defaultValue=a+''),N(t)?(r&&(n.value=d),!o(i)&&(n.checked=i)):r&&n.value!==d?(n.defaultValue=d,n.value=d):!o(i)&&(n.checked=i)}function E(e,n){var t=e.type;if('optgroup'===t){var d=e.children;if(gn(d))for(var o=0,i=d.length;o<i;o++)U(d[o],n);else nn(d)&&U(d,n)}else U(e,n)}function U(e,n){var t=e.props||Dn,d=e.dom;d.value=t.value,gn(n)&&-1!==n.indexOf(t.value)||t.value===n?d.selected=!0:(!o(n)||!o(t.selected))&&(d.selected=t.selected||!1)}function V(n){var e=this.vNode,t=e.props||Dn,d=e.dom,o=t.value;if(t.onChange){var i=t.onChange;i.event?i.event(i.data,n):i(n)}else t.onchange&&t.onchange(n);var l=this.vNode,a=l.props||Dn;o!==a.value&&I(l,d,a,!1)}function P(e,n,t,d,o){I(e,n,t,d),o&&(n.vNode=e,d&&(n.onchange=V,n.onchange.wrapped=!0))}function I(e,n,t,d){t.multiple!==n.multiple&&(n.multiple=t.multiple);var a=e.children;if(!l(a)){var r=t.value;if(d&&o(r)&&(r=t.defaultValue),gn(a))for(var p=0,i=a.length;p<i;p++)E(a[p],r);else nn(a)&&E(a,r)}}function D(n){var e=this.vNode.props||Dn,t=e.onChange;t.event?t.event(t.data,n):t(n)}function R(n){var e=this.vNode,t=e.props||Dn,d=t.value;if(t.onInput){var o=t.onInput;o.event?o.event(o.data,n):o(n)}else t.oninput&&t.oninput(n);var i=this.vNode,l=i.props||Dn;d!==l.value&&W(i,e.dom,!1)}function T(e,n,t,d,o){W(t,n,d),o&&(n.vNode=e,d&&(n.oninput=R,n.oninput.wrapped=!0,t.onChange&&(n.onchange=D,n.onchange.wrapped=!0)))}function W(e,n,t){var d=e.value,i=n.value;if(!o(d))i!==d&&(n.defaultValue=d,n.value=d);else if(t){var l=e.defaultValue;o(l)?''!==i&&(n.defaultValue='',n.value=''):l!==i&&(n.defaultValue=l,n.value=l)}}function L(e,n,t,d,o,i){512&e&&O(n,t,d,o,i),2048&e&&P(n,t,d,o,i),1024&e&&T(n,t,d,o,i)}function A(e){return e.type&&N(e.type)?!o(e.checked):!o(e.value)}function $(e){for(var n=e.firstChild;n;)if(!(8===n.nodeType))n=n.nextSibling;else if('!'===n.data){var t=document.createTextNode('');e.replaceChild(t,n),n=n.nextSibling}else{var d=n.previousSibling;e.removeChild(n),n=d||e.firstChild}}function K(e,n,t,d,o,i){var l=e.type,a=e.ref,r=e.props||Dn;if(i){var p=n.namespaceURI===bn,s=De(e,l,r,d,p,t),u=s._lastInput;s._vNode=e,G(u,n,t,s._childContext,p),e.dom=u.dom,Ve(e,a,s,t),s._updating=!1,yn.findDOMNodeEnabled&&Vn.set(s,n)}else{var c=We(e,l,r,d);G(c,n,t,d,o),e.children=c,e.dom=c.dom,Pe(r,a,n,t)}return n}function B(e,n,t,d,i){var a=e.children,r=e.props,p=e.className,s=e.flags,u=e.ref;if(i=i||0<(128&s),1!==n.nodeType||n.tagName.toLowerCase()!==e.type){var c=Me(e,null,t,d,i);return e.dom=c,je(n.parentNode,c,n),c}if(e.dom=n,l(a)?null!==n.firstChild&&(n.textContent=''):F(a,n,t,d,i),r){var f=!1,m=0<(3584&s);for(var h in m&&(f=A(r)),r)ve(h,null,r[h],n,i,f);m&&L(s,e,n,r,!0,f)}return o(p)?''!==n.className&&n.removeAttribute('class'):i?n.setAttribute('class',p):n.className=p,u&&Ie(n,u,t),n}function F(e,n,t,o,l){$(n);var a=n.firstChild;if(d(e))p(a)||3!==a.nodeType?''===e?n.appendChild(document.createTextNode('')):n.textContent=e:a.nodeValue!==e&&(a.nodeValue=e),p(a)||(a=a.nextSibling);else if(gn(e)){for(var r,s=0,i=e.length;s<i;s++)if(r=e[s],!p(r)&&c(r))if(!p(a)){var u=a.nextSibling;G(r,a,t,o,l),a=u}else Se(r,n,t,o,l);}else p(a)?Se(e,n,t,o,l):(G(e,a,t,o,l),a=a.nextSibling);for(;a;){var f=a.nextSibling;n.removeChild(a),a=f}}function j(e,n){if(3!==n.nodeType){var t=we(e,null);return e.dom=t,je(n.parentNode,t,n),t}var d=e.children;return n.nodeValue!==d&&(n.nodeValue=d),e.dom=n,n}function z(e,n){return e.dom=n,n}function G(e,n,t,d,o){var i=e.flags;28&i?K(e,n,t,d,o,0<(4&i)):3970&i?B(e,n,t,d,o):1&i?j(e,n):4096&i?z(e,n):(!1,f())}function J(e,n,t){if(!p(n)){var d=n.firstChild;if(!p(d)){for(G(e,d,t,Dn,!1),d=n.firstChild;d=d.nextSibling;)n.removeChild(d);return!0}}return!1}function Y(e,n,t,d){var o=e.type,i=Un.get(o);if(!u(i)){var l=e.key,a=null===l?i.nonKeyed:i.keyed.get(l);if(!u(a)){var r=a.pop();if(!u(r))return ce(r,e,null,n,t,d,!0),e.dom}}return null}function H(e){var n=e.type,t=e.key,d=Un.get(n);if(u(d)&&(d={keyed:new Map,nonKeyed:[]},Un.set(n,d)),p(t))d.nonKeyed.push(e);else{var o=d.keyed.get(t);u(o)&&(o=[],d.keyed.set(t,o)),o.push(e)}}function q(e,n,t,d){var o=e.type,i=En.get(o);if(!u(i)){var l=e.key,a=null===l?i.nonKeyed:i.keyed.get(l);if(!u(a)){var r=a.pop();if(!u(r)){var p=e.flags,s=me(r,e,null,n,t,d,0<(4&p),!0);if(!s)return e.dom}}}return null}function X(e){var n=e.ref,t=n&&(n.onComponentWillMount||n.onComponentWillUnmount||n.onComponentDidMount||n.onComponentWillUpdate||n.onComponentDidUpdate);if(!t){var d=e.type,o=e.key,i=En.get(d);if(u(i)&&(i={keyed:new Map,nonKeyed:[]},En.set(d,i)),p(o))i.nonKeyed.push(e);else{var l=i.keyed.get(o);u(l)&&(l=[],i.keyed.set(o,l)),l.push(e)}}}function Z(e,n,t,d,o){var i=e.flags;28&i?ee(e,n,t,d,o):3970&i?ne(e,n,t,d,o):i&4097&&Q(e,n)}function Q(e,n){p(n)||ze(n,e.dom)}function ee(e,n,t,d,i){var l=e.children,a=e.flags,r=4&a,s=e.props||Dn,c=e.ref,f=e.dom;i||(r?!l._unmounted&&(!p(yn.beforeUnmount)&&yn.beforeUnmount(e),!u(l.componentWillUnmount)&&l.componentWillUnmount(),c&&!i&&c(null),l._unmounted=!0,yn.findDOMNodeEnabled&&Vn.delete(l),Z(l._lastInput,null,l._lifecycle,!1,i)):(!o(c)&&!o(c.onComponentWillUnmount)&&c.onComponentWillUnmount(f,s),Z(l,null,t,!1,i))),n&&ze(n,f),yn.recyclingEnabled&&!r&&(n||d)&&X(e)}function ne(e,n,t,d,i){var l=e.dom,a=e.ref,r=e.props;a&&!i&&de(a);var s=e.children;if(o(s)||te(s,t,i),!p(r))for(var u in r)null!==r[u]&&be(u)&&(xe(u,r[u],null,l),r[u]=null);p(n)||ze(n,l),yn.recyclingEnabled&&(n||d)&&H(e)}function te(e,n,t){if(gn(e))for(var d,o=0,i=e.length;o<i;o++)d=e[o],!l(d)&&c(d)&&Z(d,null,n,!1,t);else c(e)&&Z(e,null,n,!1,t)}function de(e){if(i(e))e(null);else{if(l(e))return;!1,f()}}function oe(e){yn.findDOMNodeEnabled||(!1,f());var n=e&&e.nodeType?e:null;return Vn.get(e)||n}function ie(e){for(var n,t=0,d=Pn.length;t<d;t++)if(n=Pn[t],n.dom===e)return n;return null}function le(e,n,t){var d={dom:e,input:n,lifecycle:t};return Pn.push(d),d}function ae(e){for(var n=0,t=Pn.length;n<t;n++)if(Pn[n]===e)return void Pn.splice(n,1)}function re(e,n){if(In===n&&(!1,f()),e!==fn){var t=ie(n);if(p(t)){var d=new h;l(e)||(e.dom&&(e=Xe(e)),!J(e,n,d)&&Se(e,n,d,Dn,!1),t=le(n,e,d),d.trigger())}else{var i=t.lifecycle;i.listeners=[],o(e)?(Z(t.input,n,i,!1,!1),ae(t)):(e.dom&&(e=Xe(e)),se(t.input,e,n,i,Dn,!1,!1)),t.input=e,i.trigger()}if(t){var a=t.input;if(a&&28&a.flags)return a.children}}}function pe(e){return function(n,t){e||(e=n),re(t,e)}}function se(e,n,t,d,o,i,l){if(e!==n){var a=e.flags,r=n.flags;if(28&r){var p=0<(4&r);28&a?me(e,n,t,d,o,i,p,l):Te(t,Ue(n,null,d,o,i,p),e,d,l)}else 3970&r?3970&a?ce(e,n,t,d,o,i,l):Te(t,Me(n,null,d,o,i),e,d,l):1&r?1&a?he(e,n):Te(t,we(n,null),e,d,l):4096&r?4096&a?ge(e,n):Te(t,Oe(n,null),e,d,l):Re(e,n,t,d,o,i,l)}}function ue(e,n,t,d){nn(e)?Z(e,n,t,!0,d):gn(e)?Ge(n,e,t,d):n.textContent=''}function ce(e,n,t,d,i,l,a){var r=n.type,p=e.type;if(p!==r)Fe(e,n,t,d,i,l,a);else{var s=e.dom,u=e.props,c=n.props,f=e.children,m=n.children,h=e.flags,g=n.flags,y=n.ref,_=e.className,k=n.className;if(n.dom=s,l=l||0<(128&g),f!==m){var b=!0===l&&'foreignObject'!==n.type;fe(h,g,f,m,s,d,i,b,a)}if(u!==c){var v=u||Dn,x=c||Dn,N=!1;if(x!==Dn){var C=0<(3584&g);for(var S in C&&(N=A(x)),x){var w=x[S],O=v[S];ve(S,O,w,s,l,N)}C&&L(g,n,s,x,a,N)}if(v!==Dn)for(var M in v)o(x[M])&&!o(v[M])&&Ce(M,v[M],s,g)}_!==k&&(o(k)?s.removeAttribute('class'):l?s.setAttribute('class',k):s.className=k),y&&(e.ref!==y||a)&&Ie(s,y,d)}}function fe(e,n,t,o,i,a,r,p,s){var u=!1,c=!1;64&n?u=!0:0<(32&e)&&0<(32&n)?(c=!0,u=!0):l(o)?ue(t,i,a,s):l(t)?d(o)?Le(i,o):gn(o)?Ee(o,i,a,r,p):Se(o,i,a,r,p):d(o)?d(t)?Ae(i,o):(ue(t,i,a,s),Le(i,o)):gn(o)?gn(t)?(u=!0,Ye(t,o)&&(c=!0)):(ue(t,i,a,s),Ee(o,i,a,r,p)):gn(t)?(Ge(i,t,a,s),Se(o,i,a,r,p)):nn(o)&&(nn(t)?se(t,o,i,a,r,p,s):(ue(t,i,a,s),Se(o,i,a,r,p))),u&&(c?_e(t,o,i,a,r,p,s):ye(t,o,i,a,r,p,s))}function me(e,n,t,i,a,r,s,h){var g=e.type,y=n.type,_=e.key,k=n.key;if(g!==y||_!==k)return Fe(e,n,t,i,a,r,h),!1;var b=n.props||Dn;if(s){var v=e.children;if(v._updating=!0,v._unmounted){if(p(t))return!0;je(t,Ue(n,null,i,a,r,0<(4&n.flags)),e.dom)}else{var x,N=!u(v.componentDidUpdate),C=v.state,S=N?m(C,null):C,w=v.props;o(v.getChildContext)||(x=v.getChildContext()),n.children=v,v._isSVG=r,x=o(x)?a:m(a,x);var O=v._lastInput,M=v._updateComponent(S,C,w,b,a,!1,!1),E=!0;v._childContext=x,l(M)?M=Qe():M===fn?(M=O,E=!1):d(M)?M=en(M,null):gn(M)?(!1,f()):c(M)&&!p(M.dom)&&(M=Xe(M)),28&M.flags?M.parentVNode=n:28&O.flags&&(O.parentVNode=n),v._lastInput=M,v._vNode=n,E&&(se(O,M,t,i,x,r,h),N&&v.componentDidUpdate&&v.componentDidUpdate(w,S),!p(yn.afterUpdate)&&yn.afterUpdate(n),yn.findDOMNodeEnabled&&Vn.set(v,M.dom)),n.dom=M.dom}v._updating=!1}else{var U=!0,V=e.props,P=n.ref,I=!o(P),D=e.children,R=D;n.dom=e.dom,n.children=D,_===k?I&&!o(P.onComponentShouldUpdate)&&(U=P.onComponentShouldUpdate(V,b)):U=!0,!1!==U&&(I&&!o(P.onComponentWillUpdate)&&P.onComponentWillUpdate(V,b),R=y(b,a),l(R)?R=Qe():d(R)&&R!==fn?R=en(R,null):gn(R)?(!1,f()):c(R)&&!p(R.dom)&&(R=Xe(R)),R!==fn&&(se(D,R,t,i,a,r,h),n.children=R,I&&!o(P.onComponentDidUpdate)&&P.onComponentDidUpdate(V,b),n.dom=R.dom)),28&R.flags?R.parentVNode=n:28&D.flags&&(D.parentVNode=n)}return!1}function he(e,n){var t=n.children,d=e.dom;n.dom=d,e.children!==t&&(d.nodeValue=t)}function ge(e,n){n.dom=e.dom}function ye(e,n,t,d,o,l,a){for(var r=e.length,p=n.length,s=r>p?p:r,u=0;u<s;u++){var i=n[u];i.dom&&(i=n[u]=Xe(i)),se(e[u],i,t,d,o,l,a)}if(r<p)for(u=s;u<p;u++){var c=n[u];c.dom&&(c=n[u]=Xe(c)),$e(t,Se(c,null,d,o,l))}else if(0===p)Ge(t,e,d,a);else if(r>p)for(u=s;u<r;u++)Z(e[u],t,d,!1,a)}function _e(e,n,t,d,o,l,a){var r,i,s,c,f,m,h,g=e.length,y=n.length,_=g-1,k=y-1,b=0,v=0;if(0===g)return void(0<y&&Ee(n,t,d,o,l));if(0===y)return void Ge(t,e,d,a);var x=e[b],N=n[v],C=e[_],S=n[k];N.dom&&(n[v]=N=Xe(N)),S.dom&&(n[k]=S=Xe(S));outer:for(;;){for(;x.key===N.key;){if(se(x,N,t,d,o,l,a),b++,v++,b>_||v>k)break outer;x=e[b],N=n[v],N.dom&&(n[v]=N=Xe(N))}for(;C.key===S.key;){if(se(C,S,t,d,o,l,a),_--,k--,b>_||v>k)break outer;C=e[_],S=n[k],S.dom&&(n[k]=S=Xe(S))}if(C.key===N.key){se(C,N,t,d,o,l,a),Ke(t,N.dom,x.dom),_--,v++,C=e[_],N=n[v],N.dom&&(n[v]=N=Xe(N));continue}if(x.key===S.key){se(x,S,t,d,o,l,a),m=k+1,f=m<n.length?n[m].dom:null,Ke(t,S.dom,f),b++,k--,x=e[b],S=n[k],S.dom&&(n[k]=S=Xe(S));continue}break}if(b>_){if(v<=k)for(m=k+1,f=m<n.length?n[m].dom:null;v<=k;)h=n[v],h.dom&&(n[v]=h=Xe(h)),v++,Ke(t,Se(h,null,d,o,l),f);}else if(v>k)for(;b<=_;)Z(e[b++],t,d,!1,a);else{g=_-b+1,y=k-v+1;var w=Array(y);for(r=0;r<y;r++)w[r]=-1;var O=!1,M=0,E=0;if(4>=y||16>=g*y){for(r=b;r<=_;r++)if(s=e[r],E<y)for(i=v;i<=k;i++)if(c=n[i],s.key===c.key){w[i-v]=r,M>i?O=!0:M=i,c.dom&&(n[i]=c=Xe(c)),se(s,c,t,d,o,l,a),E++,e[r]=null;break}}else{var U=new Map;for(r=v;r<=k;r++)U.set(n[r].key,r);for(r=b;r<=_;r++)s=e[r],E<y&&(i=U.get(s.key),!u(i)&&(c=n[i],w[i-v]=r,M>i?O=!0:M=i,c.dom&&(n[i]=c=Xe(c)),se(s,c,t,d,o,l,a),E++,e[r]=null))}if(g===e.length&&0==E)for(Ge(t,e,d,a);v<y;)h=n[v],h.dom&&(n[v]=h=Xe(h)),v++,Ke(t,Se(h,null,d,o,l),null);else{for(r=g-E;0<r;)s=e[b++],p(s)||(Z(s,t,d,!0,a),r--);if(O){var V=ke(w);for(i=V.length-1,r=y-1;0<=r;r--)-1===w[r]?(M=r+v,h=n[M],h.dom&&(n[M]=h=Xe(h)),m=M+1,f=m<n.length?n[m].dom:null,Ke(t,Se(h,null,d,o,l),f)):0>i||r!==V[i]?(M=r+v,h=n[M],m=M+1,f=m<n.length?n[m].dom:null,Ke(t,h.dom,f)):i--}else if(E!==y)for(r=y-1;0<=r;r--)-1===w[r]&&(M=r+v,h=n[M],h.dom&&(n[M]=h=Xe(h)),m=M+1,f=m<n.length?n[m].dom:null,Ke(t,Se(h,null,d,o,l),f))}}}function ke(e){var n,t,d,o,i,l=e.slice(0),a=[0],r=e.length;for(n=0;n<r;n++){var p=e[n];if(-1!==p){if(t=a[a.length-1],e[t]<p){l[n]=t,a.push(n);continue}for(d=0,o=a.length-1;d<o;)i=0|(d+o)/2,e[a[i]]<p?d=i+1:o=i;p<e[a[d]]&&(0<d&&(l[n]=a[d-1]),a[d]=n)}}for(d=a.length,o=a[d-1];0<d--;)a[d]=o,o=l[o];return a}function be(e){return'o'===e[0]&&'n'===e[1]}function ve(e,n,t,d,i,l){if(n!==t){if(Sn.has(e)||l&&'value'===e)return;if(xn.has(e))e='autoFocus'===e?e.toLowerCase():e,d[e]=!!t;else if(vn.has(e)){var a=o(t)?'':t;d[e]!==a&&(d[e]=a)}else if(be(e))xe(e,n,t,d);else if(o(t))d.removeAttribute(e);else if('style'===e)Ne(n,t,d);else if('dangerouslySetInnerHTML'===e){var r=n&&n.__html,p=t&&t.__html;r===p||o(p)||(d.innerHTML=p)}else i&&Nn.has(e)?d.setAttributeNS(Nn.get(e),e,t):d.setAttribute(e,t)}}function xe(e,n,t,d){if(n!==t)if(wn.has(e))g(e,n,t,d);else{var l=e.toLowerCase(),a=d[l];if(a&&a.wrapped)return;if(!i(t)&&!o(t)){var r=t.event;r&&i(r)?d[l]=function(n){r(t.data,n)}:(!1,f())}else d[l]=t}}function Ne(e,n,t){var d,i,l=t.style;if(a(n))return void(l.cssText=n);if(!o(e)&&!a(e)){for(d in n)i=n[d],i!==e[d]&&(l[d]=!r(i)||Cn.has(d)?i:i+'px');for(d in e)o(n[d])&&(l[d]='')}else for(d in n)i=n[d],l[d]=!r(i)||Cn.has(d)?i:i+'px'}function Ce(e,n,t,d){'value'===e?t.value=2048&d?null:'':'style'===e?t.removeAttribute('style'):be(e)?g(e,n,null,t):t.removeAttribute(e)}function Se(e,n,t,d,o){var i=e.flags;if(3970&i)return Me(e,n,t,d,o);return 28&i?Ue(e,n,t,d,o,0<(4&i)):4096&i?Oe(e,n):1&i?we(e,n):void(!1,f())}function we(e,n){var t=document.createTextNode(e.children);return e.dom=t,p(n)||$e(n,t),t}function Oe(e,n){var t=document.createTextNode('');return e.dom=t,p(n)||$e(n,t),t}function Me(e,n,t,o,i){var a;if(yn.recyclingEnabled&&(a=Y(e,t,o,i),!p(a)))return p(n)||$e(n,a),a;var r=e.flags;i=i||0<(128&r),a=Be(e.type,i);var s=e.children,u=e.props,c=e.className,f=e.ref;if(e.dom=a,!l(s))if(d(s))Le(a,s);else{var m=!0===i&&'foreignObject'!==e.type;gn(s)?Ee(s,a,t,o,m):nn(s)&&Se(s,a,t,o,m)}if(!p(u)){var h=!1,g=0<(3584&r);for(var y in g&&(h=A(u)),u)ve(y,null,u[y],a,i,h);g&&L(r,e,a,u,!0,h)}return null!==c&&(i?a.setAttribute('class',c):a.className=c),p(f)||Ie(a,f,t),p(n)||$e(n,a),a}function Ee(e,n,t,d,o){for(var a,r=0,i=e.length;r<i;r++)a=e[r],l(a)||(a.dom&&(e[r]=a=Xe(a)),Se(e[r],n,t,d,o))}function Ue(e,n,t,d,o,i){var l;if(yn.recyclingEnabled&&(l=q(e,t,d,o),!p(l)))return p(n)||$e(n,l),l;var a=e.type,r=e.props||Dn,s=e.ref;if(i){var u=De(e,a,r,d,o,t),c=u._lastInput;u._vNode=e,e.dom=l=Se(c,null,t,u._childContext,o),p(n)||$e(n,l),Ve(e,s,u,t),u._updating=!1,yn.findDOMNodeEnabled&&Vn.set(u,l)}else{var f=We(e,a,r,d);e.dom=l=Se(f,null,t,d,o),e.children=f,Pe(r,s,l,t),p(n)||$e(n,l)}return l}function Ve(e,n,t,d){n&&(i(n)?n(t):(!1,f()));var o=!u(t.componentDidMount),l=yn.afterMount;(o||!p(l))&&d.addListener(function(){t._updating=!0,l&&l(e),o&&t.componentDidMount(),t._updating=!1})}function Pe(e,n,t,d){n&&(!o(n.onComponentWillMount)&&n.onComponentWillMount(e),!o(n.onComponentDidMount)&&d.addListener(function(){return n.onComponentDidMount(t,e)}))}function Ie(e,n,t){if(i(n))t.addListener(function(){return n(e)});else{if(l(n))return;!1,f()}}function De(e,n,t,i,a,r){u(i)&&(i=Dn);var s=new n(t,i);e.children=s,s._blockSetState=!1,s.context=i,s.props===Dn&&(s.props=t),s._lifecycle=r,s._unmounted=!1,s._pendingSetState=!0,s._isSVG=a,o(s.componentWillMount)||(s._blockRender=!0,s.componentWillMount(),s._blockRender=!1);var c;o(s.getChildContext)||(c=s.getChildContext()),s._childContext=o(c)?i:m(i,c),p(yn.beforeRender)||yn.beforeRender(s);var h=s.render(t,s.state,i);return p(yn.afterRender)||yn.afterRender(s),gn(h)?(!1,f()):l(h)?h=Qe():d(h)?h=en(h,null):(h.dom&&(h=Xe(h)),28&h.flags&&(h.parentVNode=e)),s._pendingSetState=!1,s._lastInput=h,s}function Re(e,n,t,d,o,i,l){Te(t,Se(n,null,d,o,i),e,d,l)}function Te(e,n,t,d,o){Z(t,null,d,!1,o),je(e,n,t.dom)}function We(e,n,t,o){var i=n(t,o);return gn(i)?(!1,f()):l(i)?i=Qe():d(i)?i=en(i,null):(i.dom&&(i=Xe(i)),28&i.flags&&(i.parentVNode=e)),i}function Le(e,n){''===n?e.appendChild(document.createTextNode('')):e.textContent=n}function Ae(e,n){e.firstChild.nodeValue=n}function $e(e,n){e.appendChild(n)}function Ke(e,n,t){o(t)?$e(e,n):e.insertBefore(n,t)}function Be(e,n){return!0===n?document.createElementNS(bn,e):document.createElement(e)}function Fe(e,n,t,d,o,i,l){Z(e,null,d,!1,l);var a=Se(n,null,d,o,i);n.dom=a,je(t,a,e.dom)}function je(e,n,t){e||(e=t.parentNode),e.replaceChild(n,t)}function ze(e,n){e.removeChild(n)}function Ge(e,n,t,d){yn.recyclingEnabled&&(!yn.recyclingEnabled||d)||Je(null,n,t,d),e.textContent=''}function Je(e,n,t,d){for(var o,a=0,i=n.length;a<i;a++)o=n[a],l(o)||Z(o,e,t,!0,d)}function Ye(e,n){return 0<n.length&&!o(n[0])&&!o(n[0].key)&&0<e.length&&!o(e[0])&&!o(e[0].key)}function He(e,n,t,d,o,i,l){this.children=e,this.className=n,this.dom=null,this.flags=t,this.key=d,this.props=o,this.ref=i,this.type=l}function qe(e,n,d,o,i,l,a,r){16&e&&(e=t(n)?4:8);var p=new He(void 0===o?null:o,void 0===d?null:d,e,void 0===l?null:l,void 0===i?null:i,void 0===a?null:a,n);return!0!==r&&un(p),null!==yn.createVNode&&yn.createVNode(p),p}function Xe(e){var n,t=e.flags;if(28&t){var o,a=e.props;if(p(a))o=Dn;else for(var r in o={},a)o[r]=a[r];n=qe(t,e.type,null,null,o,e.key,e.ref,!0);var s=n.props,u=s.children;if(u)if(gn(u)){var c=u.length;if(0<c){for(var f,m=[],h=0;h<c;h++)f=u[h],d(f)?m.push(f):!l(f)&&nn(f)&&m.push(Xe(f));s.children=m}}else nn(u)&&(s.children=Xe(u));n.children=null}else if(3970&t){var i,g=e.children,y=e.props;if(null===y)i=Dn;else for(var _ in i={},y)i[_]=y[_];n=qe(t,e.type,e.className,g,i,e.key,e.ref,!g)}else 1&t&&(n=en(e.children,e.key));return n}function Ze(e,n){for(var t=[],o=arguments.length-2;0<o--;)t[o]=arguments[o+2];var a=t,r=t.length;0<r&&!u(t[0])&&(!n&&(n={}),1===r&&(a=t[0]),!u(a)&&(n.children=a));var p;if(gn(e)){for(var s=[],c=0,i=e.length;c<i;c++)s.push(Xe(e[c]));p=s}else{var f=e.flags,h=e.className,g=e.key,y=e.ref;if(n&&(n.hasOwnProperty('className')&&(h=n.className),n.hasOwnProperty('ref')&&(y=n.ref),n.hasOwnProperty('key')&&(g=n.key)),28&f){p=qe(f,e.type,h,null,e.props||n?m(e.props,n):Dn,g,y,!0);var _=p.props;if(_){var k=_.children;if(k)if(gn(k)){var b=k.length;if(0<b){for(var v,x=[],N=0;N<b;N++)v=k[N],d(v)?x.push(v):!l(v)&&nn(v)&&x.push(Xe(v));_.children=x}}else nn(k)&&(_.children=Xe(k))}p.children=null}else 3970&f?(a=n&&!u(n.children)?n.children:e.children,p=qe(f,e.type,h,a,e.props||n?m(e.props,n):Dn,g,y,!1)):1&f&&(p=en(e.children,g))}return p}function Qe(){return qe(4096,null)}function en(e,n){return qe(1,null,null,e,null,n)}function nn(e){return!!e.flags}function tn(e,n){return n.key=e,n}function dn(e,n){return r(e)&&(e='.'+e),p(n.key)||'.'===n.key[0]?tn(e,n):n}function on(e,n){return n.key=e+n.key,n}function ln(e,t,o,i){for(var a=e.length;o<a;o++){var r=e[o],n=i+'.'+o;l(r)||(gn(r)?ln(r,t,0,n):(d(r)?r=en(r,null):(nn(r)&&r.dom||r.key&&'.'===r.key[0])&&(r=Xe(r)),r=p(r.key)||'.'===r.key[0]?tn(n,r):on(i,r),t.push(r)))}}function an(e){var t;!0===e.$?e=e.slice():e.$=!0;for(var o,n=0,i=e.length;n<i;n++){if(o=e[n],l(o)||gn(o)){var a=(t||e).slice(0,n);return ln(e,a,n,''),a}d(o)?(t||(t=e.slice(0,n)),t.push(dn(n,en(o,null)))):nn(o)&&null!==o.dom||p(o.key)&&0==(64&o.flags)?(t||(t=e.slice(0,n)),t.push(dn(n,Xe(o)))):t&&t.push(dn(n,Xe(o)))}return t||e}function rn(e){if(gn(e))return an(e);return nn(e)&&null!==e.dom?Xe(e):e}function pn(e,n,t){3970&e.flags&&(o(t)&&n.hasOwnProperty('children')&&(e.children=n.children),n.hasOwnProperty('className')&&(e.className=n.className||null,delete n.className)),n.hasOwnProperty('ref')&&(e.ref=n.ref,delete n.ref),n.hasOwnProperty('key')&&(e.key=n.key,delete n.key)}function sn(e){if('svg'===e)return 128;return'input'===e?512:'select'===e?2048:'textarea'===e?1024:'media'===e?256:2}function un(e){var n=e.props,t=e.children;if(28&e.flags){var d=e.type,i=d.defaultProps;if(!o(i))if(!n)n=e.props=i;else for(var r in i)u(n[r])&&(n[r]=i[r]);a(d)&&(e.flags=sn(d),n&&n.children&&(e.children=n.children,t=n.children))}n&&(pn(e,n,t),!l(n.children)&&(n.children=rn(n.children))),l(t)||(e.children=rn(t))}function cn(e,n){return i(n)?{data:e,event:n}:null}Object.defineProperty(n,'__esModule',{value:!0});var fn='$NO_OP',mn='a runtime error occured! Use Inferno in development environment to find the error.',hn=!!('undefined'!=typeof window&&window.document),gn=Array.isArray;h.prototype.addListener=function(e){this.listeners.push(e)},h.prototype.trigger=function(){for(var e,n=this.listeners;e=n.shift();)e()};var yn={afterMount:null,afterRender:null,afterUpdate:null,beforeRender:null,beforeUnmount:null,createVNode:null,findDOMNodeEnabled:!1,recyclingEnabled:!1,roots:[]},_n='http://www.w3.org/1999/xlink',kn='http://www.w3.org/XML/1998/namespace',bn='http://www.w3.org/2000/svg',vn=new Set;vn.add('volume'),vn.add('defaultChecked');var xn=new Set(['muted','scoped','loop','open','checked','default','capture','disabled','readOnly','required','autoplay','controls','seamless','reversed','allowfullscreen','novalidate','hidden','autoFocus','selected','indeterminate']),Nn=new Map;Nn.set('xlink:href',_n),Nn.set('xlink:arcrole',_n),Nn.set('xlink:actuate',_n),Nn.set('xlink:show',_n),Nn.set('xlink:role',_n),Nn.set('xlink:title',_n),Nn.set('xlink:type',_n),Nn.set('xml:base',kn),Nn.set('xml:lang',kn),Nn.set('xml:space',kn);var Cn=new Set(['animationIterationCount','borderImageOutset','borderImageSlice','borderImageWidth','boxFlex','boxFlexGroup','boxOrdinalGroup','columnCount','flex','flexGrow','flexPositive','flexShrink','flexNegative','flexOrder','gridRow','gridColumn','fontWeight','lineClamp','lineHeight','opacity','order','orphans','tabSize','widows','zIndex','zoom','fillOpacity','floodOpacity','stopOpacity','strokeDasharray','strokeDashoffset','strokeMiterlimit','strokeOpacity','strokeWidth']),Sn=new Set;Sn.add('children'),Sn.add('childrenType'),Sn.add('defaultValue'),Sn.add('ref'),Sn.add('key'),Sn.add('checked'),Sn.add('multiple');var wn=new Set(['onClick','onMouseDown','onMouseUp','onMouseMove','onSubmit','onDblClick','onKeyDown','onKeyUp','onKeyPress']),On=hn&&!!navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform),Mn=new Map,En=new Map,Un=new Map,Vn=new Map,Pn=yn.roots;var In=hn?document.body:null,Dn={};var Rn='3.7.1';n['default']={EMPTY_OBJ:Dn,NO_OP:fn,cloneVNode:Ze,createRenderer:pe,createVNode:qe,findDOMNode:oe,getFlagsForElementVnode:sn,internal_DOMNodeMap:Vn,internal_isUnitlessNumber:Cn,internal_normalize:un,internal_patch:se,linkEvent:cn,options:yn,render:re,version:Rn},n.EMPTY_OBJ=Dn,n.NO_OP=fn,n.cloneVNode=Ze,n.createRenderer=pe,n.createVNode=qe,n.findDOMNode=oe,n.getFlagsForElementVnode=sn,n.internal_DOMNodeMap=Vn,n.internal_isUnitlessNumber=Cn,n.internal_normalize=un,n.internal_patch=se,n.linkEvent=cn,n.options=yn,n.render=re,n.version=Rn},function(e,n,t){'use strict';var d=t(0),o=t.n(d),i=t(4),l=t.n(i),a=o.a.createVNode;class r extends l.a{constructor(e){super(e);const n=[];for(let t=0;t<e.height;++t){const t=[];for(let n=0;n<e.width;++n)t.push(Math.random());n.push(t)}this.state={field:n}}componentDidMount(){window.requestAnimationFrame(()=>this.tick())}tick(){const{width:e,height:n}=this.props,{field:t}=this.state,d=[];for(let o=0;o<this.props.height;++o){const i=[];for(let d=0;d<this.props.width;++d){const l=t[o][d];let a=0;const r=t[(o+n-1)%n][(d+e-1)%e]+t[(o+n-1)%n][d]+t[(o+n-1)%n][(d+1)%e]+t[o][(d+e-1)%e]+t[o][(d+1)%e]+t[(o+1)%n][(d+e-1)%e]+t[(o+1)%n][d]+t[(o+1)%n][(d+1)%e];1>=r?a=0:1<r&&2>=r?a=(r-1)*l:2<r&&3>=r?a=l+(r-2)*(1-l):3<r&&4>=r?a=4-r:4<r&&(a=0),i.push(a)}d.push(i)}this.setState({field:d}),window.requestAnimationFrame(()=>this.tick())}render(){const{width:e,height:n,style:t}=this.props,{field:d}=this.state;return a(128,'svg',null,this.state.field.map((e,n)=>e.map((e,t)=>a(2,'rect',null,null,{x:t,y:n,width:1,height:1,fill:`rgba(0,0,0,${e})`}))),{viewBox:`0 0 ${e} ${n}`,style:t})}}n.a=r},function(e,n,t){e.exports=t(5).default,e.exports.default=e.exports},function(e,n,t){'use strict';function d(e){var n=typeof e;return'string'==n||'number'==n}function o(e){return p(e)||a(e)}function i(e){return a(e)||!1===e||r(e)||p(e)}function l(e){return'function'==typeof e}function a(e){return null===e}function r(e){return!0===e}function p(e){return void 0===e}function s(e){throw e||(e=_),new Error('Inferno Error: '+e)}function u(e,n){var t={};if(e)for(var d in e)t[d]=e[d];if(n)for(var o in n)t[o]=n[o];return t}function c(e,n){if(28&e.flags){var t=e.parentVNode;t&&(t.dom=n,c(t,n))}}function f(e,n,t){var d=v.get(e);void 0===d&&(d=[],v.set(e,d),x.then(function(){v.delete(e),e._updating=!0,h(e,n,function(){for(var n=0,t=d.length;n<t;n++)d[n].call(e)}),e._updating=!1})),o(t)||d.push(t)}function m(e,n,t){l(n)&&(n=n(e.state,e.props,e.context));var d=e._pendingState;if(o(d))e._pendingState=d=n;else for(var i in n)d[i]=n[i];if(k&&!e._pendingSetState&&!e._blockRender)e._updating?f(e,!1,t):(e._pendingSetState=!0,e._updating=!0,h(e,!1,t),e._updating=!1);else{var a=e.state;if(null===a)e.state=d;else for(var r in d)a[r]=d[r];e._pendingState=null,!o(t)&&e._blockRender&&e._lifecycle.addListener(t.bind(e))}}function h(e,n,t){if(!e._unmounted){if(n||!e._blockRender){e._pendingSetState=!1;var l=e._pendingState,r=e.state,p=u(r,l),f=e.props,m=e.context;e._pendingState=null;var h=e._updateComponent(r,p,f,f,m,n,!0),_=!0;i(h)?h=g.createVNode(4096,null):h===y?(h=e._lastInput,_=!1):d(h)?h=g.createVNode(1,null,null,h):b(h)&&(!1,s());var k=e._lastInput,v=e._vNode,x=k.dom&&k.dom.parentNode||(k.dom=v.dom);if(e._lastInput=h,_){var N;o(e.getChildContext)||(N=e.getChildContext()),N=o(N)?e._childContext:u(m,N);var C=e._lifecycle;g.internal_patch(k,h,x,C,N,e._isSVG,!1),C.trigger(),o(e.componentDidUpdate)||e.componentDidUpdate(f,r,m),a(g.options.afterUpdate)||g.options.afterUpdate(v)}var S=v.dom=h.dom;g.options.findDOMNodeEnabled&&g.internal_DOMNodeMap.set(e,h.dom),c(v,S)}else e.state=e._pendingState,e._pendingState=null;o(t)||t.call(e)}}Object.defineProperty(n,'__esModule',{value:!0});var g=t(0),y='$NO_OP',_='a runtime error occured! Use Inferno in development environment to find the error.',k=!!('undefined'!=typeof window&&window.document),b=Array.isArray;var v=new Map,x=Promise.resolve(),N=function(e,n){this.state=null,this._blockRender=!1,this._blockSetState=!0,this._pendingSetState=!1,this._pendingState=null,this._lastInput=null,this._vNode=null,this._unmounted=!1,this._lifecycle=null,this._childContext=null,this._isSVG=!1,this._updating=!0,this.props=e||g.EMPTY_OBJ,this.context=n||g.EMPTY_OBJ};N.prototype.forceUpdate=function(e){this._unmounted||!k||h(this,!0,e)},N.prototype.setState=function(e,n){this._unmounted||(this._blockSetState?(!1,s()):m(this,e,n))},N.prototype.setStateSync=function(e){!1,this.setState(e)},N.prototype._updateComponent=function(e,n,t,d,i,l,a){if(!0===this._unmounted&&(!1,s()),t!==d||d===g.EMPTY_OBJ||e!==n||l){if(t!==d||d===g.EMPTY_OBJ){if(!o(this.componentWillReceiveProps)&&!a){var r=u(this.state);this._blockRender=!0,this.componentWillReceiveProps(d,i),this._blockRender=!1;var p=this.state;r!==p&&(this.state=r,this._pendingSetState=!0,this._pendingState=p)}this._pendingSetState&&(n=u(n,this._pendingState),this._pendingSetState=!1,this._pendingState=null)}if(l||o(this.shouldComponentUpdate)||this.shouldComponentUpdate&&this.shouldComponentUpdate(d,n,i)){o(this.componentWillUpdate)||(this._blockSetState=!0,this.componentWillUpdate(d,n,i),this._blockSetState=!1),this.props=d,this.state=n,this.context=i,g.options.beforeRender&&g.options.beforeRender(this);var c=this.render(d,n,i);return g.options.afterRender&&g.options.afterRender(this),c}this.props=d,this.state=n,this.context=i}return y},N.prototype.render=function(){},n['default']=N}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,